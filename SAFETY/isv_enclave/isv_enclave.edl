enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"

    trusted {
        public sgx_status_t enclave_init_ra(int b_pse,
                                            [out] sgx_ra_context_t *p_context);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message, 
                                                  size_t message_size, 
                                                  [in,size=mac_size] uint8_t* mac, 
                                                  size_t mac_size);
        public sgx_status_t put_secret_data(sgx_ra_context_t context,  
                                            [in,size=secret_size] uint8_t* p_secret,
                                            uint32_t secret_size,
                                            [in,count=16] uint8_t* gcm_mac);


         /* define ECALLs here. */
		public void foo([in, size=len] char* buf_in,[out, size=len] char* buf, int len);
		public void hammingDistance([in, size=len_in] char** input, [user_check] int* output,int query,  int len_out,int len_in,int rowcount);
		public void euclidieanDistance([in, size=len_in] char** input, [user_check] int* output,int query,  int len_out,int len_in,int rowcount);
		public void ld([in, size=len_ldmatrix] char** input, [out, size=len_ldResult] char* ldResult, int len_ldmatrix, int len_ldResult);
		public void hwe([in, size=len_hwematrix] char** input, [out, size=len_hweResult] char* hweResult, int len_hwematrix, int len_hweResult);
		public void catt([in, size=len_cattmatrix] char** input, [out, size=len_cattResult] char* cattResult, int len_cattmatrix, int len_cattResult);
		public void fet([in, size=len_fetmatrix] char** input, [out, size=len_fetResult] char* fetResult, int len_fetmatrix, int len_fetResult);

		/*public void ld([in, size=len_N_AB] char* N_AB, [in, size=len_N_Ab] char* N_Ab, [in, size=len_N_aB] char* N_aB, [in, size=len_N_ab] char* N_ab, [out, size=len_ldResult] char* ldResult, 
		int len_N_AB, int len_N_Ab, int len_N_aB, int len_N_ab, int len_ldResult);*/

    };

	untrusted {
        void ocall_print_string([in, string] const char *str);
    };

};
